--- mnesia_original/src/mnesia_dumper.erl	2012-03-14 18:58:25.000000000 +0100
+++ mnesia_patch/src/mnesia_dumper.erl	2012-03-14 18:36:08.000000000 +0100
@@ -438,14 +438,21 @@
 	_ when Storage == disc_only_copies ->
 	    mnesia_tm:do_update_op(Tid, Storage, Item),
 	    Snmp = mnesia_tm:prepare_snmp(Tab, Key, [Item]),
 	    mnesia_tm:do_snmp(Tid, Snmp);
 
+	_ when element(1, Storage) == external_copies ->
+	    mnesia_tm:do_update_op(Tid, Storage, Item),
+	    Snmp = mnesia_tm:prepare_snmp(Tab, Key, [Item]),
+	    mnesia_tm:do_snmp(Tid, Snmp);
+
 	_ when Storage == unknown ->
 	    ignore
     end.
 
+disc_delete_table(Tab, {external_copies, Mod}) ->
+    Mod:delete_table(Tab);
 disc_delete_table(Tab, Storage) ->
     case mnesia_monitor:use_dir() of
 	true ->
 	    if
 		Storage == disc_only_copies; Tab == schema ->
@@ -469,13 +476,16 @@
 	    erase({?MODULE, Tab});
 	false ->
 	    ignore
     end.
 
+disc_delete_indecies(Tab, Cs, {external_copies, Mod}) ->
+    Indecies = Cs#cstruct.index,
+    Mod:delete_index(Tab, Indecies);
 disc_delete_indecies(_Tab, _Cs, Storage) when Storage /= disc_only_copies ->
     ignore;
-disc_delete_indecies(Tab, Cs, disc_only_copies) ->
+disc_delete_indecies(Tab, Cs, disc_only_copies ) ->
     Indecies = Cs#cstruct.index,
     mnesia_index:del_transient(Tab, Indecies, disc_only_copies).
 
 insert_op(Tid, Storage, {{Tab, Key}, Val, Op}, InPlace, InitBy) ->
     %% Propagate to disc only
@@ -495,10 +505,14 @@
 
 insert_op(Tid, _, {op, rec, Storage, Item}, InPlace, InitBy) ->
     {{Tab, Key}, ValList, Op} = Item,
     insert(Tid, Storage, Tab, Key, ValList, Op, InPlace, InitBy);
 
+insert_op(_, _, {op, change_table_copy_type, _, FromS, ToS, _}, _, _) 
+  when element(1, FromS) == external_copies;
+       element(1, ToS) == external_copies ->
+    ignore;
 insert_op(Tid, _, {op, change_table_copy_type, N, FromS, ToS, TabDef}, InPlace, InitBy) ->
     Cs = mnesia_schema:list2cs(TabDef),
     Val = mnesia_schema:insert_cstruct(Tid, Cs, true), % Update ram only
     {schema, Tab, _} = Val,
     case lists:member(N, val({current, db_nodes})) of
@@ -660,10 +674,12 @@
 						false,
 						false,
 						read_write),
 			    mnesia_log:unsafe_close_log(temp)
 		    end;
+                {external_copies, _} ->
+                    ignore;
 		_ ->
 		    DetsProps = proplists:get_value(dets, StorageProps, []),
 
 		    Args = [{file, mnesia_lib:tab2dat(Tab)},
 			    {type, mnesia_lib:disk_type(Tab, Cs#cstruct.type)},
@@ -819,11 +835,17 @@
     if
 	Tab == schema, Storage == ram_copies ->
 	    insert_cstruct(Tid, Cs, true, InPlace, InitBy);
         Tab /= schema ->
 	    mnesia_controller:del_active_replica(Tab, Node),
-	    mnesia_lib:del({Tab, Storage}, Node),
+            Storage1 = if
+                           element(1, Storage) == external_copies ->
+                               external_copies;
+                           true ->
+                               Storage
+                       end,
+	    mnesia_lib:del({Tab, Storage1}, Node),
 	    if
 		Node == node() ->
 		    case Cs#cstruct.local_content of
 			true -> mnesia_lib:set({Tab, where_to_read}, nowhere);
 			false -> mnesia_lib:set_remote_where_to_read(Tab)
@@ -883,10 +905,13 @@
 	startup when Storage == disc_only_copies ->
 	    true = open_files(Tab, Storage, InPlace, InitBy),
 	    mnesia_index:init_indecies(Tab, Storage, [Pos]);
 	startup ->
 	    ignore;
+	_ when element(1, Storage) == external_copies ->
+        {_, Mod} = Storage,
+        Mod:add_index(Tab, [Pos]);
 	_  ->
 	    case val({Tab,where_to_read}) of
 		nowhere -> ignore;
 		_ ->
 		    mnesia_index:init_indecies(Tab, Storage, [Pos])
@@ -900,10 +925,13 @@
     case InitBy of
 	startup when Storage == disc_only_copies ->
 	    mnesia_index:del_index_table(Tab, Storage, Pos);
 	startup ->
 	    ignore;
+        _ when element(1, Storage) == external_copies ->
+            {_, Mod} = Storage,
+            Mod:delete_index(Tab, [Pos]);
 	_ ->
 	    mnesia_index:del_index_table(Tab, Storage, Pos)
     end,
     insert_cstruct(Tid, Cs, true, InPlace, InitBy);
 
@@ -939,10 +967,12 @@
 
 insert_op(Tid, _, {op, change_table_frag, _Change, TabDef}, InPlace, InitBy) ->
     Cs = mnesia_schema:list2cs(TabDef),
     insert_cstruct(Tid, Cs, true, InPlace, InitBy).
 
+open_files(_, {external_copies, _}, _, _) ->
+    true;
 open_files(Tab, Storage, UpdateInPlace, InitBy)
   when Storage /= unknown, Storage /= ram_copies ->
     case get({?MODULE, Tab}) of
 	undefined ->
 	    case ?catch_val({Tab, setorbag}) of
